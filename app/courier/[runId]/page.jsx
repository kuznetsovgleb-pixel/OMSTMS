'use client';
import React,{useEffect,useRef,useState} from 'react';
export default function Courier({params}){const runId=params.runId;const [runs,setRuns]=useState([]);const [run,setRun]=useState(null);const canvasRef=useRef(null);const drawing=useRef(false);
useEffect(()=>{const rs=JSON.parse(localStorage.getItem('runs')||'[]');setRuns(rs);setRun(rs.find(r=>r.id===runId)||null)},[runId]);useEffect(()=>{localStorage.setItem('runs',JSON.stringify(runs))},[runs]);
function markDelivered(stopId){setRuns(p=>p.map(r=>r.id!==runId?r:{...r,stops:r.stops.map(s=>s.id===stopId?{...s,status:'Done',deliveredAt:new Date().toISOString()}:s)}))}
function attachPhoto(e,stopId){const f=e.target.files?.[0];if(!f)return;const reader=new FileReader();reader.onload=()=>{const data=String(reader.result);setRuns(p=>p.map(r=>r.id!==runId?r:{...r,stops:r.stops.map(s=>s.id===stopId?{...s,photo:data}:s)}))};reader.readAsDataURL(f)}
useEffect(()=>{const c=canvasRef.current;if(!c)return;const ctx=c.getContext('2d');ctx.lineWidth=2;ctx.lineCap='round';const down=e=>{drawing.current=true;ctx.beginPath();const r=c.getBoundingClientRect();ctx.moveTo((e.touches?e.touches[0].clientX:e.clientX)-r.left,(e.touches?e.touches[0].clientY:e.clientY)-r.top)};const move=e=>{if(!drawing.current)return;const r=c.getBoundingClientRect();ctx.lineTo((e.touches?e.touches[0].clientX:e.clientX)-r.left,(e.touches?e.touches[0].clientY:e.clientY)-r.top);ctx.stroke()};const up=()=>{drawing.current=false};c.addEventListener('mousedown',down);c.addEventListener('mousemove',move);window.addEventListener('mouseup',up);c.addEventListener('touchstart',down);c.addEventListener('touchmove',move);window.addEventListener('touchend',up);return()=>{c.removeEventListener('mousedown',down);c.removeEventListener('mousemove',move);window.removeEventListener('mouseup',up);c.removeEventListener('touchstart',down);c.removeEventListener('touchmove',move);window.removeEventListener('touchend',up)}} ,[]);
function saveSignature(stopId){const data=canvasRef.current.toDataURL();setRuns(p=>p.map(r=>r.id!==runId?r:{...r,stops:r.stops.map(s=>s.id===stopId?{...s,signature:data}:s)}));alert('Подпись сохранена')}
function clearSignature(){const c=canvasRef.current;const ctx=c.getContext('2d');ctx.clearRect(0,0,c.width,c.height)}
if(!run) return <div className='p-6'>Рейс не найден</div>;
return(<div className='min-h-screen p-4'>
 <div className='flex items-center justify-between mb-3'><div><div className='text-lg font-semibold'>Курьерский режим — {run.id}</div><div className='text-sm text-gray-500'>Машина: {run.vehicle} • Водитель: {run.driver}</div></div><a href='/transport' className='btn'>← К рейсам</a></div>
 {run.stops.map(s=>(<div key={s.id} className='card mb-3'><div className='p-3 flex items-center justify-between'><div><div className='font-semibold'>{s.name} <span className='text-gray-500 text-sm'>({s.orderId})</span></div><div className='text-sm text-gray-500'>{s.address}</div></div><div><span className={`chip ${s.status==='Done'?'border-emerald-600 text-emerald-700 bg-emerald-50':''}`}>{s.status}</span></div></div><div className='p-3 flex flex-col md:flex-row gap-3 md:items-end'><div className='flex items-center gap-2'><label className='btn'>Фото POD<input type='file' accept='image/*' className='hidden' onChange={e=>attachPhoto(e,s.id)}/></label><button className='btn' onClick={()=>markDelivered(s.id)}>Доставлено</button></div><div className='ms-auto'><a className='btn' target='_blank' href={`/label/${s.orderId}`}>Печать ярлыка</a></div></div><div className='p-3'><div className='text-sm font-medium mb-1'>Подпись получателя</div><canvas ref={canvasRef} width='600' height='160' className='border rounded w-full'></canvas><div className='mt-2 flex gap-2'><button className='btn' onClick={()=>saveSignature(s.id)}>Сохранить подпись</button><button className='btn' onClick={clearSignature}>Очистить</button></div></div>{s.photo&&<div className='p-3'><div className='text-sm text-gray-500'>Фото приложено</div><img src={s.photo} alt='POD' className='max-h-40 rounded'/></div>}</div>))}
</div>)}
